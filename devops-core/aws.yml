# Creates new Ubuntu instance for Metisa

---
# Effectively lifted from the Ansible documentation on EC2:
# http://docs.ansible.com/ec2_module.html
  - name: Provision an EC2 node
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    vars:
      instance_type: t2.micro
      security_group: default
      image: ami-96f1c1c4
      region: ap-southeast-1
    vars_files:
      - env_vars/base.yml
    tasks:
      - name: Lookup launched host
        debug: msg={{ groups['staging']==[] }}
        register: stagingGroupisEmpty

      - name: Lookup launched host
        debug: msg={{ groups['production']==[] }}
        register: productionGroupisEmpty
        
      # Create Production Instance
      - name: Launch new Staging Instance
        local_action: ec2 instance_tags="Name={{ project_name }},Type=staging" group={{ security_group }} instance_type={{ instance_type}} image={{ image }} wait=true region={{ region }} keypair={{ keypair }}
        register: ec2Staging
        when: stagingGroupisEmpty.msg


      - name: Add staging instance to staging group
        add_host: name={{ item.public_ip }} groups=staging ansible_ssh_private_key_file=~/.ssh/{{ keypair }}.pem
        with_items: ec2Staging.instances
        when: stagingGroupisEmpty.msg

      - name: Add staging instance to host file
        local_action: lineinfile dest="{{ host_file_path }}" regexp="{{ item.public_ip }}" insertafter="\[staging\]" line="{{ item.public_ip }} ansible_ssh_private_key_file=~/.ssh/{{ keypair }}.pem"
        with_items: ec2Staging.instances
        when: stagingGroupisEmpty.msg


      # Create Production Instance
      - name: Launch new Production Instance
        local_action: ec2 instance_tags="Name={{ project_name }},Type=production" group={{ security_group }} instance_type={{ instance_type}} image={{ image }} wait=true region={{ region }} keypair={{ keypair }}
        register: ec2Production
        when: productionGroupisEmpty.msg

      - name: Add production instance to production group
        add_host: name={{ item.public_ip }} groups=production ansible_ssh_private_key_file=~/.ssh/{{ keypair }}.pem
        with_items: ec2Production.instances
        when: productionGroupisEmpty.msg

      - name: Add production instance to host file
        local_action: lineinfile dest="{{ host_file_path }}" regexp="{{ item.public_ip }}" insertafter="\[production\]" line="{{ item.public_ip }} ansible_ssh_private_key_file=~/.ssh/{{ keypair }}.pem"
        with_items: ec2Production.instances
        when: productionGroupisEmpty.msg


      # Wait SSH
      - name: Wait for staging SSH to come up
        local_action: wait_for host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
        with_items: ec2Staging.instances
        when: stagingGroupisEmpty.msg

      - name: Wait for production SSH to come up
        local_action: wait_for host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
        with_items: ec2Production.instances
        when: productionGroupisEmpty.msg

  - name: With the newly provisioned EC2 node configure that thing
    hosts: launched # This uses the hosts that we put into the in-memory hosts repository with the add_host module.
    become: yes # On EC2 nodes, this is automatically passwordless.
    remote_user: ubuntu # This is the username for all ubuntu images, rather than root, or something weird.
    gather_facts: True  #We need to re-enable this, as we turned it off earlier.
    roles:
      - common
      - nginx
